// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var fi = FlightInfo.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FlightInfo
    {
        [JsonProperty("data")]
        public List<Data> Data { get; set; }

        [JsonProperty("dictionaries")]
        public Dictionaries Dictionaries { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("offerItems")]
        public List<OfferItem> OfferItems { get; set; }
    }

    public partial class OfferItem
    {
        [JsonProperty("services")]
        public List<Service> Services { get; set; }

        [JsonProperty("price")]
        public Price Price { get; set; }

        [JsonProperty("pricePerAdult")]
        public Price PricePerAdult { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("total")]
        public string Total { get; set; }

        [JsonProperty("totalTaxes")]
        public string TotalTaxes { get; set; }
    }

    public partial class Service
    {
        [JsonProperty("segments")]
        public List<Segment> Segments { get; set; }
    }

    public partial class Segment
    {
        [JsonProperty("flightSegment")]
        public FlightSegment FlightSegment { get; set; }

        [JsonProperty("pricingDetailPerAdult")]
        public PricingDetailPerAdult PricingDetailPerAdult { get; set; }
    }

    public partial class FlightSegment
    {
        [JsonProperty("departure")]
        public Arrival Departure { get; set; }

        [JsonProperty("arrival")]
        public Arrival Arrival { get; set; }

        [JsonProperty("carrierCode")]
        public string CarrierCode { get; set; }

        [JsonProperty("number")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Number { get; set; }

        [JsonProperty("aircraft")]
        public FlightSegmentAircraft Aircraft { get; set; }

        [JsonProperty("operating")]
        public Operating Operating { get; set; }

        [JsonProperty("duration")]
        public string Duration { get; set; }
    }

    public partial class FlightSegmentAircraft
    {
        [JsonProperty("code")]
        public string Code { get; set; }
    }

    public partial class Arrival
    {
        public string TargetLocation { get; set; }

        [JsonProperty("iataCode")]
        public string IataCode { get; set; }

        [JsonProperty("terminal")]
        public string Terminal { get; set; }

        [JsonProperty("at")]
        public DateTimeOffset At { get; set; }
    }

    public partial class Operating
    {
        [JsonProperty("carrierCode")]
        public string CarrierCode { get; set; }

        [JsonProperty("number")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Number { get; set; }
    }

    public partial class PricingDetailPerAdult
    {
        [JsonProperty("travelClass")]
        public string TravelClass { get; set; }

        [JsonProperty("fareClass")]
        public string FareClass { get; set; }

        [JsonProperty("availability")]
        public long Availability { get; set; }

        [JsonProperty("fareBasis")]
        public string FareBasis { get; set; }
    }

    public partial class Dictionaries
    {
        [JsonProperty("carriers")]
        public Carriers Carriers { get; set; }

        [JsonProperty("currencies")]
        public Currencies Currencies { get; set; }

        [JsonProperty("aircraft")]
        public DictionariesAircraft Aircraft { get; set; }

        [JsonProperty("locations")]
        public Dictionary<string, Location> Locations { get; set; }
    }

    public partial class DictionariesAircraft
    {
        [JsonProperty("764")]
        public string The764 { get; set; }

        [JsonProperty("76W")]
        public string The76W { get; set; }
    }

    public partial class Carriers
    {
        [JsonProperty("DL")]
        public string Dl { get; set; }

        [JsonProperty("UA")]
        public string Ua { get; set; }
    }

    public partial class Currencies
    {
        [JsonProperty("EUR")]
        public string Eur { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("subType")]
        public string SubType { get; set; }

        [JsonProperty("detailedName")]
        public string DetailedName { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("links")]
        public Links Links { get; set; }

        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("defaults")]
        public Defaults Defaults { get; set; }
    }

    public partial class Defaults
    {
        [JsonProperty("nonStop")]
        public bool NonStop { get; set; }
    }

    public partial class Links
    {
        [JsonProperty("self")]
        public Uri Self { get; set; }
    }

    public partial class FlightInfo
    {
        public static FlightInfo FromJson(string json) => JsonConvert.DeserializeObject<FlightInfo>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this FlightInfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
